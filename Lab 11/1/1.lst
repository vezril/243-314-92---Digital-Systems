Microsoft (R) Macro Assembler Version 6.11d		    11/19/08 16:07:11
1.asm							     Page 1 - 1


				; PROGRAM: 1.ASM
				;
				; AUTHOR: Calvin O. Ference
				;
				; DESCRIPTION:  Subroutines thingy
				; 
				; 

				        ASSUME	cs:code, ds:data, ss:stak
					EXTRN	outstr:FAR, getbyte:FAR, getword:FAR, outbyte:FAR, outword:FAR, newline:FAR
					EXTRN	getc:FAR
 0000				code    SEGMENT
				;--------------------------
 0000				main    PROC   
 0000  B8 ---- R		init:		mov	ax,data
 0003  8E D8					mov	ds,ax
 0005  C6 06 0007 R 00				mov	eflag,0		;resetting everything 

 000A  E8 0014			start:		call	greet		;greets the user
 000D  E8 004D					call	iptval		;this is to input vars
 0010  E8 0095					call	eval		;the eval part
 0013  E8 0111					call	legend		;a little legend
 0016  E8 017F					call	output		;the answer
 0019  E8 01DD					call	again		;ask if you want to do it again
 001C  B8 4C00			shi:		mov	ax,4c00h
 001F  CD 21					int	21h
 0021				main	ENDP
				;-------------------------
 0021				greet	PROC
 0021  8D 3E 003E R				lea	di,smsg1	;prints out the ranges for the user
 0025  9A ---- 0000 E				call	outstr
 002A  9A ---- 0000 E				call	newline
 002F  8D 3E 006F R				lea	di,smsg2
 0033  9A ---- 0000 E				call	outstr
 0038  9A ---- 0000 E				call	newline
 003D  8D 3E 0094 R				lea	di,smsg3
 0041  9A ---- 0000 E				call	outstr
 0046  9A ---- 0000 E				call	newline
 004B  9A ---- 0000 E				call	newline		;all the way to here
 0050  B8 0000					mov	ax,0		;then sets all registers to 0 to be safe
 0053  BB 0000					mov	bx,0
 0056  B9 0000					mov	cx,0
 0059  BA 0000					mov	dx,0
 005C  C3					ret
 005D				greet	ENDP
				;-------------------------
 005D				iptval	PROC
 005D  8D 3E 0008 R			lea	di,msg1			;all of this next section
 0061  9A ---- 0000 E			call	outstr			;does is calls for the values
 0066  9A ---- 0000 E			call	getword			;and sends them into memory
 006B  A3 0000 R			mov	vala,ax
 006E  9A ---- 0000 E			call	getword
 0073  A3 0002 R			mov	vala+2,ax
 0076  9A ---- 0000 E			call	newline
 007B  8D 3E 001A R			lea	di,msg2
 007F  9A ---- 0000 E			call	outstr
 0084  9A ---- 0000 E			call	getword
 0089  A3 0004 R			mov	valb,ax
 008C  9A ---- 0000 E			call	newline
 0091  8D 3E 002C R			lea	di,msg3
 0095  9A ---- 0000 E			call	outstr
 009A  9A ---- 0000 E			call	getbyte
 009F  A2 0006 R			mov	valc,al
 00A2  9A ---- 0000 E			call	newline
 00A7  C3				ret
 00A8				iptval	ENDP
				;--------------------------
 00A8				eval	PROC			;the following section is all the evaluation
 00A8  83 3E 0000 R 02			cmp	vala,2		;code used.
 00AD  77 2F				ja	error		;It's the cheater way of doing it though
 00AF  81 3E 0002 R AB98		cmp	vala+2,0AB98h
 00B5  77 27				ja	error
 00B7  81 3E 0002 R 09C4		cmp	vala+2,09c4h
 00BD  72 1F				jb	error
 00BF  81 3E 0004 R 61A8	pta:	cmp	valb,61A8h
 00C5  77 1E				ja	error2
 00C7  81 3E 0004 R 00C8		cmp	valb,00c8h
 00CD  72 16				jb	error2
 00CF  80 3E 0006 R 63		ptb:	cmp	valc,99
 00D4  7F 24				jg	error3
 00D6  80 3E 0006 R E0			cmp	valc,-32
 00DB  7C 1D				jl	error3
 00DD  C3				ret

 00DE  C6 06 0007 R 01		error:	mov	eflag,01
 00E3  EB DA				jmp	pta
 00E5  80 3E 0007 R 01		error2:	cmp	eflag,01
 00EA  74 07				je	error2b
 00EC  C6 06 0007 R 02			mov	eflag,02
 00F1  EB DC				jmp	ptb
 00F3				error2b:
 00F3  C6 06 0007 R 0A			mov	eflag,0Ah
 00F8  EB D5				jmp	ptb
 00FA  80 3E 0007 R 01		error3:	cmp	eflag,01
 00FF  74 14				je	errora
 0101  80 3E 0007 R 02			cmp	eflag,02
 0106  74 13				je	errorb
 0108  80 3E 0007 R 0A			cmp	eflag,0Ah
 010D  74 12				je	errorf
 010F  C6 06 0007 R 04			mov	eflag,04h
 0114  C3				ret
 0115  C6 06 0007 R 0B		errora:	mov	eflag,0Bh
 011A  C3				ret
 011B  C6 06 0007 R 0C		errorb:	mov	eflag,0Ch
 0120  C3				ret
 0121  C6 06 0007 R FF		errorf:	mov	eflag,0ffh
 0126  C3				ret
 0127				eval	ENDP
				;--------------------------
 0127				legend	PROC
 0127  8D 3E 00B3 R			lea	di,lmsg1	;this section prints out a little legend for the user
 012B  9A ---- 0000 E			call	outstr
 0130  9A ---- 0000 E			call	newline
 0135  8D 3E 00C6 R			lea	di,lmsg2
 0139  9A ---- 0000 E			call	outstr
 013E  9A ---- 0000 E			call	newline
 0143  8D 3E 00DC R			lea	di,lmsg3
 0147  9A ---- 0000 E			call	outstr
 014C  9A ---- 0000 E			call	newline
 0151  8D 3E 00F2 R			lea	di,lmsg4
 0155  9A ---- 0000 E			call	outstr
 015A  9A ---- 0000 E			call	newline
 015F  8D 3E 0108 R			lea	di,lmsg5
 0163  9A ---- 0000 E			call	outstr
 0168  9A ---- 0000 E			call	newline
 016D  8D 3E 0125 R			lea	di,lmsg6
 0171  9A ---- 0000 E			call	outstr
 0176  9A ---- 0000 E			call	newline
 017B  8D 3E 0142 R			lea	di,lmsg7
 017F  9A ---- 0000 E			call	outstr
 0184  9A ---- 0000 E			call	newline
 0189  8D 3E 015F R			lea	di,lmsg8
 018D  9A ---- 0000 E			call	outstr
 0192  9A ---- 0000 E			call	newline		;all the way to here
 0197  C3				ret
 0198				legend	ENDP
				;--------------------------
 0198				output	PROC
 0198  8D 3E 0178 R			lea	di,omsg1	;this shows Val A
 019C  9A ---- 0000 E			call	outstr
 01A1  A1 0000 R			mov	ax,vala
 01A4  9A ---- 0000 E			call	outword
 01A9  A1 0002 R			mov	ax,vala+2
 01AC  9A ---- 0000 E			call	outword		;all the way to here
 01B1  9A ---- 0000 E			call	newline
 01B6  8D 3E 0190 R			lea	di,omsg2	;this shows Val B
 01BA  9A ---- 0000 E			call	outstr
 01BF  A1 0004 R			mov	ax,valb
 01C2  9A ---- 0000 E			call	outword
 01C7  9A ---- 0000 E			call	newline		;up to here
 01CC  8D 3E 01A8 R			lea	di,omsg3	;calling C
 01D0  9A ---- 0000 E			call	outstr
 01D5  A0 0006 R			mov	al,valc
 01D8  9A ---- 0000 E			call	outbyte
 01DD  9A ---- 0000 E			call	newline		;up to here
 01E2  8D 3E 01C0 R			lea	di,omsg4	;and calling the eflag
 01E6  9A ---- 0000 E			call	outstr
 01EB  A0 0007 R			mov	al,eflag
 01EE  9A ---- 0000 E			call	outbyte
 01F3  9A ---- 0000 E			call	newline
 01F8  C3				ret
 01F9				output	ENDP
				;-----------------------
 01F9				again	PROC
 01F9  9A ---- 0000 E		insert:	call	newline
 01FE  8D 3E 01CF R			lea	di,amsg1
 0202  9A ---- 0000 E			call	outstr
 0207  9A ---- 0000 E			call	getc
 020C  3C 4E				cmp	al,4eh
 020E  74 17				je	shi
 0210  3C 59				cmp	al,59h
 0212  74 10				je	start
 0214  8D 3E 0207 R			lea	di,amsg2
 0218  9A ---- 0000 E			call	outstr
 021D  9A ---- 0000 E			call	newline
 0222  EB D5				jmp	insert

 0224  E8 FDD9			start:	call	main

 0227  B8 4C00			shi:	mov	ax,4c00h
 022A  CD 21				int	21h
 022C				again	ENDP

 022C				code	ENDS



 0000				data	SEGMENT
 0000 0000 0000			vala	dw	0,0
 0004 0000			valb	dw	0
 0006 00			valc	db	0
 0007 00			eflag	db	0
 0008 49 6E 70 75 74 20		msg1	db	"Input Value A >> ",04h
       56 61 6C 75 65 20
       41 20 3E 3E 20 04
 001A 49 6E 70 75 74 20		msg2	db	"Input Value B >> ",04h
       56 61 6C 75 65 20
       42 20 3E 3E 20 04
 002C 49 6E 70 75 74 20		msg3	db	"Input Value C >> ",04h
       56 61 6C 75 65 20
       43 20 3E 3E 20 04
 003E 52 61 6E 67 65 20		smsg1	db	"Range of A is, 0000 09C4h to 0002 AB98h unsigned",04
       6F 66 20 41 20 69
       73 2C 20 30 30 30
       30 20 30 39 43 34
       68 20 74 6F 20 30
       30 30 32 20 41 42
       39 38 68 20 75 6E
       73 69 67 6E 65 64
       04
 006F 52 61 6E 67 65 20		smsg2	db	"Range of B is, 00C8 to 61A8 unsigned",04
       6F 66 20 42 20 69
       73 2C 20 30 30 43
       38 20 74 6F 20 36
       31 41 38 20 75 6E
       73 69 67 6E 65 64
       04
 0094 52 61 6E 67 65 20		smsg3	db	"Range of A is, E0 to 63 Signed",04
       6F 66 20 41 20 69
       73 2C 20 45 30 20
       74 6F 20 36 33 20
       53 69 67 6E 65 64
       04
 00B3 2F 2F 2F 45 46 4C		lmsg1	db	"///EFLAG LEGEND\\\",04
       41 47 20 4C 45 47
       45 4E 44 5C 5C 5C
       04
 00C6 30 31 2C 20 41 20		lmsg2	db	"01, A is out of Range",04
       69 73 20 6F 75 74
       20 6F 66 20 52 61
       6E 67 65 04
 00DC 30 32 2C 20 42 20		lmsg3	db	"02, B is out of Range",04
       69 73 20 6F 75 74
       20 6F 66 20 52 61
       6E 67 65 04
 00F2 30 34 2C 20 43 20		lmsg4	db	"04, C is out of Range",04
       69 73 20 6F 75 74
       20 6F 66 20 52 61
       6E 67 65 04
 0108 30 41 2C 20 41 20		lmsg5	db	"0A, A and B are out of Range",04
       61 6E 64 20 42 20
       61 72 65 20 6F 75
       74 20 6F 66 20 52
       61 6E 67 65 04
 0125 30 42 2C 20 41 20		lmsg6	db	"0B, A and C are out of Range",04
       61 6E 64 20 43 20
       61 72 65 20 6F 75
       74 20 6F 66 20 52
       61 6E 67 65 04
 0142 30 43 2C 20 42 20		lmsg7	db	"0C, B and C are out of Range",04
       61 6E 64 20 43 20
       61 72 65 20 6F 75
       74 20 6F 66 20 52
       61 6E 67 65 04
 015F 46 46 2C 20 61 6C		lmsg8	db	"FF, all are out of Range",04
       6C 20 61 72 65 20
       6F 75 74 20 6F 66
       20 52 61 6E 67 65
       04
 0178 49 6E 70 75 74 65		omsg1	db	"Inputed Value for A >> ",04
       64 20 56 61 6C 75
       65 20 66 6F 72 20
       41 20 3E 3E 20 04
 0190 49 6E 70 75 74 65		omsg2	db	"Inputed Value for B >> ",04
       64 20 56 61 6C 75
       65 20 66 6F 72 20
       42 20 3E 3E 20 04
 01A8 49 6E 70 75 74 65		omsg3	db	"Inputed Value for C >> ",04
       64 20 56 61 6C 75
       65 20 66 6F 72 20
       43 20 3E 3E 20 04
 01C0 45 72 72 6F 72 20		omsg4	db	"Error Flag >> ",04h
       46 6C 61 67 20 3E
       3E 20 04
 01CF 44 6F 20 79 6F 75		amsg1	db	"Do you wish to evaluate some values again? (Y or N) >> ",04
       20 77 69 73 68 20
       74 6F 20 65 76 61
       6C 75 61 74 65 20
       73 6F 6D 65 20 76
       61 6C 75 65 73 20
       61 67 61 69 6E 3F
       20 28 59 20 6F 72
       20 4E 29 20 3E 3E
       20 04
 0207 43 6F 6D 65 20 41		amsg2	db	"Come Again?",04h
       67 61 69 6E 3F 04
 0213				data	ENDS

 0000				stak	SEGMENT	STACK
 0000  0100 [				dw	256 dup (0)
        0000
       ]
 0200				stak	ENDS

						END
Microsoft (R) Macro Assembler Version 6.11d		    11/19/08 16:07:11
1.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

code . . . . . . . . . . . . . .	16 Bit	 022C	  Para	  Private 
data . . . . . . . . . . . . . .	16 Bit	 0213	  Para	  Private 
stak . . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

again  . . . . . . . . . . . . .	P Near	 01F9	  code	Length= 0033 Public
  insert . . . . . . . . . . . .	L Near	 01F9	  code	
  start  . . . . . . . . . . . .	L Near	 0224	  code	
  shi  . . . . . . . . . . . . .	L Near	 0227	  code	
eval . . . . . . . . . . . . . .	P Near	 00A8	  code	Length= 007F Public
  pta  . . . . . . . . . . . . .	L Near	 00BF	  code	
  ptb  . . . . . . . . . . . . .	L Near	 00CF	  code	
  error  . . . . . . . . . . . .	L Near	 00DE	  code	
  error2 . . . . . . . . . . . .	L Near	 00E5	  code	
  error2b  . . . . . . . . . . .	L Near	 00F3	  code	
  error3 . . . . . . . . . . . .	L Near	 00FA	  code	
  errora . . . . . . . . . . . .	L Near	 0115	  code	
  errorb . . . . . . . . . . . .	L Near	 011B	  code	
  errorf . . . . . . . . . . . .	L Near	 0121	  code	
greet  . . . . . . . . . . . . .	P Near	 0021	  code	Length= 003C Public
iptval . . . . . . . . . . . . .	P Near	 005D	  code	Length= 004B Public
legend . . . . . . . . . . . . .	P Near	 0127	  code	Length= 0071 Public
main . . . . . . . . . . . . . .	P Near	 0000	  code	Length= 0021 Public
  init . . . . . . . . . . . . .	L Near	 0000	  code	
  start  . . . . . . . . . . . .	L Near	 000A	  code	
  shi  . . . . . . . . . . . . .	L Near	 001C	  code	
output . . . . . . . . . . . . .	P Near	 0198	  code	Length= 0061 Public


Symbols:

                N a m e                 Type     Value    Attr

amsg1  . . . . . . . . . . . . .	Byte	 01CF	  data	
amsg2  . . . . . . . . . . . . .	Byte	 0207	  data	
eflag  . . . . . . . . . . . . .	Byte	 0007	  data	
getbyte  . . . . . . . . . . . .	L Far	 0000	  External
getc . . . . . . . . . . . . . .	L Far	 0000	  External
getword  . . . . . . . . . . . .	L Far	 0000	  External
lmsg1  . . . . . . . . . . . . .	Byte	 00B3	  data	
lmsg2  . . . . . . . . . . . . .	Byte	 00C6	  data	
lmsg3  . . . . . . . . . . . . .	Byte	 00DC	  data	
lmsg4  . . . . . . . . . . . . .	Byte	 00F2	  data	
lmsg5  . . . . . . . . . . . . .	Byte	 0108	  data	
lmsg6  . . . . . . . . . . . . .	Byte	 0125	  data	
lmsg7  . . . . . . . . . . . . .	Byte	 0142	  data	
lmsg8  . . . . . . . . . . . . .	Byte	 015F	  data	
msg1 . . . . . . . . . . . . . .	Byte	 0008	  data	
msg2 . . . . . . . . . . . . . .	Byte	 001A	  data	
msg3 . . . . . . . . . . . . . .	Byte	 002C	  data	
newline  . . . . . . . . . . . .	L Far	 0000	  External
omsg1  . . . . . . . . . . . . .	Byte	 0178	  data	
omsg2  . . . . . . . . . . . . .	Byte	 0190	  data	
omsg3  . . . . . . . . . . . . .	Byte	 01A8	  data	
omsg4  . . . . . . . . . . . . .	Byte	 01C0	  data	
outbyte  . . . . . . . . . . . .	L Far	 0000	  External
outstr . . . . . . . . . . . . .	L Far	 0000	  External
outword  . . . . . . . . . . . .	L Far	 0000	  External
smsg1  . . . . . . . . . . . . .	Byte	 003E	  data	
smsg2  . . . . . . . . . . . . .	Byte	 006F	  data	
smsg3  . . . . . . . . . . . . .	Byte	 0094	  data	
vala . . . . . . . . . . . . . .	Word	 0000	  data	
valb . . . . . . . . . . . . . .	Word	 0004	  data	
valc . . . . . . . . . . . . . .	Byte	 0006	  data	

	   0 Warnings
	   0 Errors
